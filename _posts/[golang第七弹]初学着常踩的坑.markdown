---
layout: post
title:  "[golang第七弹]初学着常踩的坑"
date:   2019-08-23 16:05:20 +0000
categories: xiaochang create
---


初学者应该注意的地方：


1、大括号不能独立成行。

2、未使用变量错误——对于全局变量和函数参数变量，是可以定义后不使用的。但是对于函数内部变量来说，如果进行定义后不进行使用，编译器会提示错误。

3、导入包未调用错误——导入包后，如果不进行调用，例如函数，接口，结构及变量等对象，那么会出现编译错误。这里建议使用空白表示符“_”来避免类似错误。

4、变量简写只适用于函数内部。

5、重新定义变量要使用简写声明——你不能在一个独立的语句中重新定义一个变量，但在复合变量场合是允许的。重新定义的变量需存在于同一区块，否则会产生一个阴影变量。

6、意外的变量——变量简写语法由于十分简便，因此很容易会把它作为一个常规的指派操作。虽然可以通过编译，但是其结果却不是我们想要的。

7、不能使用“nil”来定义一个没有类型的变量——“nil”关键字可用于表示“0值”，例如在接口，函数，指针等对象中。但如果把它用于定义一个没有进行类型声明的变量，将会导致编译错误，因为编译器无法确定变量类型。

8、使用“nil”切片(Slices)和图(Maps)——为“nil”切片添加对象是可以的，但对于图来说，这样会造成运行缓慢。

9、图容量——可以在创建时设定图的容量，但是不用对图使用cap()。

10、字符串不能为“nil”。

11、数组函数参数——对于C/C++开发者来说，数组如同指针；当把数组传入函数时，函数会引用相同的内存位置，所以能够更新原始数据。但在Go中，数组是值，因此当把数组传入函数时，得到的是原始数组数据的副本。因此如果想更新数组数据，这个造成问题。

12、切片和数组“范围(range)”里的异常——在使用for-in或foreach语句时会遇到该问题。在Go中，range的定义是有所不同的。它会产生两个值：第一个为索引项，第二个说项的数据。

13、单维度的切片和数——要创建一个动态多维度数组，要使用独立切片。首先，要创建外层切片；然后，要对每个内联切片进行分配。每个内联切片对于其它切片来说是独立的。

14、访问不存在的图键——如果想知道一个给定图记录是否存在，应该通过检查来自图访问操作的第二个值。

15、不可改变的字符串——如果想通过索引运算符来更新一个字符串变量中的独立字符是会出现错误的，由于字符串是只读的字节片。正确做法是使用一个单字节片进行操作而不是转成字符串类型进行操作。

16、字符串和字节片转换——当把字符串转换为字节片时，你得到是一份完整的原始数据。Go提供了一对[]byte to string，string to []byte的优化转换操作，以防止造成额外分配。

17、字符串和索引运算符——字符串中的索引运算符返回的是字节值而不是字符。

18、字符串不总是UTF8文本——字符串没有被限定为UTF8文本。它们可以包含任何字节。只有当使用字符串常数时才是UTF8文本。

19、字符串长度——Go中应使用RuneCountInString()函数来取得字符串长度值而不是len()函数。

20、多行切片，数组，和图定义中缺少逗号。

21、log.Fatal和log.Panic：日志库提供了不同的日志级别。

22、预置数据结构运算是不同步的。

23、在range中的字符串迭代值。

24、使用for range来进行图迭代。

25、Switch语句的注意事项：switch语句的case区块默认是隔断的。

26、递增和递减：Go中是不支持i++或++i的递增/减操作的。

27、按位不是运算符：很多语言使用~来作为一元逻辑非运算符，而Go中则使用^。

28、运算符优先级差异。

29、导出结构域是没有编码。

30、程序结束时没有销毁Go线程。

31、当目标接收器就绪时就发送一个缓冲区通道返回。

32、封闭通道发送的问题。

33、使用“nil”通道。

34、有值接收器的方法不能用于改变原始值。


中级开发者应该注意的地方：


1、关闭HTTP响应。

2、关闭HTTP连接。

3、结构，数组，切片和图的比较。

4、可以使用==运算符来比较不同的结构变量。

5、从异常中恢复。

6、可以使用recover()来捕获/拦截异常。

7、更新和引用切片，数组，及图“range”的项值。

8、切片的“隐藏”数据。

9、切片数据的错误。

10、“变味”的切片。

11、类型声明和方法。

12、for switch和for select代码块的终止。

13、for语句中的迭代变量和结束。

14、延迟的函数调用参数求值。

15、延迟函数调用执行。

16、错误类型的判断。

17、断开的Go线程和资源泄漏。



高级开发者应该注意的地方：


1、对值实例使用指针接收方法。

2、更新图值域。

3、“nil”接口和“nil”接口值。

4、堆栈变量。

5、GOMAXPROCS,并发，并行化。

6、抢先调度。
